import logging
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler, MessageHandler, Filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PremiumBot:
    def __init__(self, token):
        self.updater = Updater(token, use_context=True)
        self.dp = self.updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.add_handler(CommandHandler("start", self.start))
        self.dp.add_handler(CallbackQueryHandler(self.button_handler))
        self.dp.add_handler(PreCheckoutQueryHandler(self.precheckout))
        self.dp.add_handler(MessageHandler(Filters.successful_payment, self.successful_payment))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def start(self, update, context):
        keyboard = [[InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data='buy_premium')]]
        update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

    def button_handler(self, update, context):
        query = update.callback_query
        query.answer()
        
        if query.data == 'buy_premium':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏")
            self.send_invoice(query.from_user.id, context)

    def send_invoice(self, user_id, context):
        try:
            context.bot.send_chat_action(user_id, 'typing')
            
            context.bot.send_invoice(
                chat_id=user_id,
                title="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
                description="–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü",
                payload="premium_sub_month",
                provider_token="",  # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                currency="XTR",    # –í–∞–ª—é—Ç–∞ Telegram Stars
                prices=[LabeledPrice("–ü—Ä–µ–º–∏—É–º", 300)],
                start_parameter="premium_sub",
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False
            )
            logger.info(f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {str(e)}")
            context.bot.send_message(
                user_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def precheckout(self, update, context):
        query = update.pre_checkout_query
        query.answer(ok=True)
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {query.from_user.id}")

    def successful_payment(self, update, context):
        user_id = update.effective_user.id
        update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_id}: {update.message.successful_payment}")

    def run(self):
        self.updater.start_polling()
        self.updater.idle()

if __name__ == '__main__':
    bot = PremiumBot("6731485857:AAEbdqmRb1vemETinn1exBXbWwEankNImT4")
    bot.run()